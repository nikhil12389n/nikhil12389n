{"ast":null,"code":"var _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport ConnectMetamask from \"../Connection/ConnectMetaMask.js\";\nimport ConnectContract2 from '../Connection/ConnectContract2.js';\nimport ConnectContract from \"../Connection/ConnectSmartContract.js\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Trackorder() {\n  _s();\n  const [res, setRes] = useState([]);\n  const [trackorder, SetTrackOrder] = useState([]);\n  ConnectMetamask();\n  ConnectContract();\n  ConnectContract2();\n  useEffect(() => {\n    const fetchdata = async () => {\n      const res = await window.contract.methods.getAllRequestSendAdst(localStorage.getItem(\"ROLENAME\")).call();\n      const res1 = await window.contract1.methods.getalladstsend(localStorage.getItem(\"ROLENAME\")).call();\n      const updated = [...res];\n      for (let i = 0; i < res1.length; i++) {\n        for (let j = 0; j < updated.length; j++) {\n          if (parseInt(res1[i].reqno) === parseInt(updated[j].reqno) && res1[i].from === updated[j].from) {\n            // Create a new object with updated properties\n            const updatedObj = {\n              ...updated[j],\n              status: res1[i].status,\n              acceptedby: res1[i].acceptedby\n            };\n\n            // Replace the object in the array with the updated object\n            updated[j] = updatedObj;\n          }\n        }\n      }\n      setRes(updated);\n      for (let i = 0; i < updated.length; i++) {\n        const data = await window.contract.methods.getAllTrackorders(updated[i].from, updated[i].reqno).call();\n        console.log(data);\n      }\n    };\n    fetchdata();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false);\n}\n_s(Trackorder, \"vcfLBvJrYVhqGIYy7fK+ZviNGE0=\");\n_c = Trackorder;\nvar _c;\n$RefreshReg$(_c, \"Trackorder\");","map":{"version":3,"names":["React","useEffect","useState","ConnectMetamask","ConnectContract2","ConnectContract","Fragment","_Fragment","jsxDEV","_jsxDEV","Trackorder","_s","res","setRes","trackorder","SetTrackOrder","fetchdata","window","contract","methods","getAllRequestSendAdst","localStorage","getItem","call","res1","contract1","getalladstsend","updated","i","length","j","parseInt","reqno","from","updatedObj","status","acceptedby","data","getAllTrackorders","console","log","_c","$RefreshReg$"],"sources":["D:/SCMFINAL2/login/public/src/Roles/ADST/Trackorder.js"],"sourcesContent":["import React, { useEffect, useState } from 'react'\r\nimport ConnectMetamask from \"../Connection/ConnectMetaMask.js\";\r\nimport ConnectContract2 from '../Connection/ConnectContract2.js';\r\nimport ConnectContract from \"../Connection/ConnectSmartContract.js\";\r\nexport default function Trackorder() {\r\n    const [res,setRes]=useState([]);\r\n    const [trackorder,SetTrackOrder]=useState([]);\r\n    ConnectMetamask();\r\n    ConnectContract();\r\n    ConnectContract2();\r\n    useEffect(() => {\r\n        const fetchdata = async () => {\r\n          const res = await window.contract.methods.getAllRequestSendAdst(localStorage.getItem(\"ROLENAME\")).call();\r\n          const res1 = await window.contract1.methods.getalladstsend(localStorage.getItem(\"ROLENAME\")).call();\r\n          \r\n          const updated = [...res];\r\n          for (let i = 0; i < res1.length; i++) {\r\n            for (let j = 0; j < updated.length; j++) {\r\n              if (parseInt(res1[i].reqno) === parseInt(updated[j].reqno) && res1[i].from === updated[j].from) {\r\n                // Create a new object with updated properties\r\n                const updatedObj = {\r\n                  ...updated[j],\r\n                  status: res1[i].status,\r\n                  acceptedby: res1[i].acceptedby\r\n                };\r\n    \r\n                // Replace the object in the array with the updated object\r\n                updated[j] = updatedObj;\r\n              }\r\n            }\r\n          }\r\n    \r\n          setRes(updated);\r\n          for(let i=0;i<updated.length;i++){\r\n            const data=await window.contract.methods.getAllTrackorders(updated[i].from,updated[i].reqno).call();\r\n            console.log(data);\r\n          }  \r\n        }\r\n        fetchdata();\r\n      }, []);\r\n  return (\r\n    <>\r\n\r\n    </>\r\n  )\r\n}\r\n"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,OAAOC,eAAe,MAAM,kCAAkC;AAC9D,OAAOC,gBAAgB,MAAM,mCAAmC;AAChE,OAAOC,eAAe,MAAM,uCAAuC;AAAC,SAAAC,QAAA,IAAAC,SAAA;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACpE,eAAe,SAASC,UAAUA,CAAA,EAAG;EAAAC,EAAA;EACjC,MAAM,CAACC,GAAG,EAACC,MAAM,CAAC,GAACX,QAAQ,CAAC,EAAE,CAAC;EAC/B,MAAM,CAACY,UAAU,EAACC,aAAa,CAAC,GAACb,QAAQ,CAAC,EAAE,CAAC;EAC7CC,eAAe,CAAC,CAAC;EACjBE,eAAe,CAAC,CAAC;EACjBD,gBAAgB,CAAC,CAAC;EAClBH,SAAS,CAAC,MAAM;IACZ,MAAMe,SAAS,GAAG,MAAAA,CAAA,KAAY;MAC5B,MAAMJ,GAAG,GAAG,MAAMK,MAAM,CAACC,QAAQ,CAACC,OAAO,CAACC,qBAAqB,CAACC,YAAY,CAACC,OAAO,CAAC,UAAU,CAAC,CAAC,CAACC,IAAI,CAAC,CAAC;MACxG,MAAMC,IAAI,GAAG,MAAMP,MAAM,CAACQ,SAAS,CAACN,OAAO,CAACO,cAAc,CAACL,YAAY,CAACC,OAAO,CAAC,UAAU,CAAC,CAAC,CAACC,IAAI,CAAC,CAAC;MAEnG,MAAMI,OAAO,GAAG,CAAC,GAAGf,GAAG,CAAC;MACxB,KAAK,IAAIgB,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGJ,IAAI,CAACK,MAAM,EAAED,CAAC,EAAE,EAAE;QACpC,KAAK,IAAIE,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGH,OAAO,CAACE,MAAM,EAAEC,CAAC,EAAE,EAAE;UACvC,IAAIC,QAAQ,CAACP,IAAI,CAACI,CAAC,CAAC,CAACI,KAAK,CAAC,KAAKD,QAAQ,CAACJ,OAAO,CAACG,CAAC,CAAC,CAACE,KAAK,CAAC,IAAIR,IAAI,CAACI,CAAC,CAAC,CAACK,IAAI,KAAKN,OAAO,CAACG,CAAC,CAAC,CAACG,IAAI,EAAE;YAC9F;YACA,MAAMC,UAAU,GAAG;cACjB,GAAGP,OAAO,CAACG,CAAC,CAAC;cACbK,MAAM,EAAEX,IAAI,CAACI,CAAC,CAAC,CAACO,MAAM;cACtBC,UAAU,EAAEZ,IAAI,CAACI,CAAC,CAAC,CAACQ;YACtB,CAAC;;YAED;YACAT,OAAO,CAACG,CAAC,CAAC,GAAGI,UAAU;UACzB;QACF;MACF;MAEArB,MAAM,CAACc,OAAO,CAAC;MACf,KAAI,IAAIC,CAAC,GAAC,CAAC,EAACA,CAAC,GAACD,OAAO,CAACE,MAAM,EAACD,CAAC,EAAE,EAAC;QAC/B,MAAMS,IAAI,GAAC,MAAMpB,MAAM,CAACC,QAAQ,CAACC,OAAO,CAACmB,iBAAiB,CAACX,OAAO,CAACC,CAAC,CAAC,CAACK,IAAI,EAACN,OAAO,CAACC,CAAC,CAAC,CAACI,KAAK,CAAC,CAACT,IAAI,CAAC,CAAC;QACnGgB,OAAO,CAACC,GAAG,CAACH,IAAI,CAAC;MACnB;IACF,CAAC;IACDrB,SAAS,CAAC,CAAC;EACb,CAAC,EAAE,EAAE,CAAC;EACV,oBACEP,OAAA,CAAAF,SAAA,mBAEE,CAAC;AAEP;AAACI,EAAA,CAzCuBD,UAAU;AAAA+B,EAAA,GAAV/B,UAAU;AAAA,IAAA+B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}